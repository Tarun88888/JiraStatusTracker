import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.issue.fields.CustomField
import com.atlassian.jira.event.type.EventDispatchOption 
import com.atlassian.jira.issue.history.ChangeItemBean
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue

def changeHistoryManager = ComponentAccessor.changeHistoryManager
def issueManager = ComponentAccessor.issueManager
def customFieldManager = ComponentAccessor.customFieldManager

def openDate null
def closedDate = null
def onHoldStartDate = null
def onHoldTotalMillis = 0
def currDate new Date()
//def issuenum null

// Assuming 'issue' is already defined 
MutableIssue issuenum = issueManager.getIssueObject(issue.id)
def CustomFieldManager = ComponentAccessor.getCustomFieldManager()
def cField = customFieldManager.getCustomFieldObject(Duration "customfield_number")
def cFieldValue = issue.getCustomFieldValue(cField)

// Get the issue creation date

openDate = issuenum.getCreated()
def changeItems = changeHistoryManager.getChangeItemsForField(issue, "status")

changeItems.each { ChangeItemBean item ->
	if (item.toString "Closed") {
		closedDate = item.created
	} else if (item.toString "On Hold") {
		onHoldStartDate = item.created
	} else if (item.fromString = "On Hold" && onHoldStartDate != null) {
		onHoldTotalMillis += item.created.time - onHoldStartDate.time
		onHoldStartDate null
	}
}

if (openDate != null) {

def endDate = closedDate?: currDate
def totalMillis = (endDate time openDate time) - onHoldTotalMillis
def totalDays (totalMillis/ (1000*60*60*24)) as int
def totalHours = ((totalMillis % (1000*60*60*24)) / (1000*60*60)) as int
def totalMinutes ((totalMillis % (1000*60*60)) / (1000 * 60)) as int
def totalSeconds ((totalMillis % (1000*60)) / 1000) as int

def result = "$(totalDays)d $(totalHours)h $(totalMinutes) $(totalSeconds)s".toString()

// Check if the issue is transitioning to "Closed"

if (issuenum.getStatus().getName() in ["Closed", "Reopened", "Resolved", "In Progress", "Opened"]) {

	// Set the value in the target field 
	//issuenum.setCustomFieldValue(targetField, resultnum)

	def changeHolder = new DefaultIssueChangeHolder()

	cField.updateValue(null, issuenum, new ModifiedValue(cFieldValue, result), changeHolder)

	// Update the issue 
	issueManager.updateIssue (ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser(),issuenum, EventDispatchOption.DO_NOT_DISPATCH, false)

}

if (issuenum.getStatus().getName() == "On Hold") { // Calculate the time up to the "On Hold" transition

	def onHoldMillis (onHoldStartDate.time openDate.time) onHoldTotalMillis

	def onHoldDays = (onHoldMillis/ (1000*60*60*24)) as int
	def onHoldHours = ((onHoldMillis % (1000*60*60*24)) / (1000*60*60)) as int 
	def onHoldMinutes ((onHoldMillis % (1000*60*60)) / (1000*60)) as int
	def onHoldSeconds = ((onHoldMillis % (1000*60)) /1000) as int

	def onHoldResult = "$(onHoldDays)d ${onHoldHours)h ${onHoldMinutes)m $(onHoldSeconds)s".toString()

	// Logging for debugging

	println "On Hold result: $(onHoldResult)"

	return onHoldResult
}
	return result 

} else { 
	return "0d 0h 0m 0s"
}